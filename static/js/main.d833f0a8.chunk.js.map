{"version":3,"sources":["index.js"],"names":["BOARD_SIZE","Square","value","onClick","color","className","style","width","height","Board","i","_color","this","props","squares","board","row","j","push","renderSquare","winList","winner","console","log","l","length","parseInt","React","Component","Game","state","history","Array","fill","col","stepNumber","xIsNext","isASC","slice","gameWinner","player","slot","i_row","i_col","count","c","start","stop","calculateWinner","setState","concat","step","winPlayer","status","current","sort","moves","map","move","desc","key","fontWeight","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d833f0a8.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nvar BOARD_SIZE = 20;\n\nfunction Square({value, onClick, color }) {\n    return (\n        <button className=\"square\" onClick={onClick} style={{width: 30, height: 30, color: color}}>\n            {value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    \n\n    renderSquare(i,_color) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                color = {_color}\n            />\n        );\n    }\n\n\n    render() {\n        var board = [];\n        \n        for (var i = 0; i < BOARD_SIZE; i++) {\n        var row = [];\n        for (var j = 0; j < BOARD_SIZE; j++) {\n            row.push(this.renderSquare(j + i*BOARD_SIZE, this.props.squares[j +i*BOARD_SIZE]==\"O\"? \"red\": \"blue\"));\n            }\n\n        if (this.props.winList && this.props.winner)\n        {\n            console.log(\"list: \"+this.props.winList)\n            for (var l=0; l<this.props.winList.length;l++)\n            {\n                if (parseInt(this.props.winList[l]/BOARD_SIZE)==i)\n                {\n                    console.log(\"color + \" + parseInt(this.props.winList[l]/BOARD_SIZE))\n                    row[parseInt(this.props.winList[l]%BOARD_SIZE)] = this.renderSquare(this.props.winList[l], \"green\")\n                }\n            }\n        }\n        \n        board.push(<div style={{width: 30*BOARD_SIZE}} className=\"board-row\"> {row} </div>);\n        }\n\n        return (\n            <div>\n                {board}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {constructor(props) {\n    super(props);\n    if (BOARD_SIZE < 5)\n        BOARD_SIZE = 5;\n    this.state = {\n        history: [\n            {\n              squares: Array(BOARD_SIZE*BOARD_SIZE).fill(null),\n              row: 0,\n              col: 0\n            }\n          ],\n          stepNumber: 0,\n        xIsNext: true,\n        winner: null,\n        winList: null,\n        isASC: true\n    };\n}\n\nhandleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (this.state.winner && this.state.stepNumber === history.length)\n        return\n    if (squares[i]) {\n        return;\n    }\n   \n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    var gameWinner = calculateWinner(squares,i,this.state.xIsNext ? 'X' : 'O',BOARD_SIZE*BOARD_SIZE - this.state.stepNumber);\n    console.log(\"slot tick\")\n    this.setState({\n        history: history.concat([\n            {\n              squares: squares,\n              row: parseInt(i/BOARD_SIZE)+1,\n              col: parseInt(i%BOARD_SIZE)+1\n            }\n          ]),\n        stepNumber: history.length,\n        winner: gameWinner? (gameWinner.length==1? \"Game Tie!\": squares[i] + \" win!\"):null,\n        winList: gameWinner,\n        xIsNext: !this.state.xIsNext\n    });\n}\n\n    jumpTo(step) {\n        var winPlayer = this.state.winList? (this.state.winList.length==1? \"Game Tie!\": this.state.history[step].squares[this.state.winList[0]] + \" win!\"):null\n        console.log(this.state.history[step])\n        this.setState({\n        stepNumber: step,\n        xIsNext: (step % 2) === 0,\n        winner: step === this.state.history.length-1? winPlayer: null\n        });\n    }\n\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n\n        const sort = this.state.isASC === true?  <button onClick={() => {this.setState({isASC: !this.state.isASC})} }>Sort Descending</button> :  <button onClick={() => {this.setState({isASC: !this.state.isASC})}}>Sort Ascending</button>\n        const moves = history.map((step, move) => {\n        if (this.state.isASC===false)\n           {\n            move = (history.length - move - 1)\n            console.log(move)\n           }\n        const desc = move ?\n            'Go to move #' + move + ' ---- row: '+ history[move].row + ' col: ' + history[move].col + ' ----' :\n            'Go to game start'; \n        if (this.state.stepNumber === move)\n        {\n            return (\n                <li key={move}>\n                <button style={{width: 300, fontWeight: \"bold\"}} onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        }\n        else\n        {\n            return (\n                <li key={move}>\n                <button style={{width: 300}} onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        }\n\n        });\n        let status;\n        if (this.state.winner) {\n            status = 'Game Over: ' + this.state.winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n    \n        return (\n          <div className=\"game\">\n            <div className=\"game-board\">\n              <Board\n                squares={current.squares}\n                winner = {this.state.winner}\n                winList = {this.state.winList}\n                onClick={i => this.handleClick(i)}\n              />\n            </div>\n            <div className=\"game-info\">\n              <div>{status}</div>\n              <ol>{sort}</ol>\n              <ol>{moves}</ol>\n            </div>\n          </div>\n        );\n    }\n}\n\nfunction calculateWinner(squares, i, player, slot) {\n    \n   var i_row = parseInt(i/BOARD_SIZE);\n   var i_col = parseInt(i%BOARD_SIZE);\n\n   var winList = Array();\n   if (parseInt(slot) == 1)\n    {\n        winList.push(-1)\n        return winList\n    }\n\n   var count = 0; \n   //check row\n   for (var c=BOARD_SIZE*i_row;c<BOARD_SIZE*(i_row+1);c++)\n   {\n        if (squares[c]===player)\n            {\n                count++;\n                winList.push(c)\n            }\n        else {\n            winList = []\n            count=0;\n        }\n        if (count==5)\n        {\n            console.log(winList)\n            return winList;\n        }\n   }\n   count = 0\n   winList = []\n   //check col\n   for (var c=0;c<BOARD_SIZE;c++)\n   {\n        if (squares[c*BOARD_SIZE+i_col]===player)\n        {\n            count++;\n            winList.push(c*BOARD_SIZE+i_col)\n        }\n        else {\n            winList = []\n            count=0;\n        }\n        if (count==5)\n        {\n            return winList;\n        }\n   }\n   \n   count = 0\n   winList = []\n\n    var start = (i_row*BOARD_SIZE+i_col)\n    while (start-(BOARD_SIZE+1)>=0&&(start-(BOARD_SIZE+1))%BOARD_SIZE!=(BOARD_SIZE-1))\n    {\n        start = start -(BOARD_SIZE+1)\n    }\n    var stop = parseInt(i_row*BOARD_SIZE+i_col)\n    while ((stop+(BOARD_SIZE+1))%BOARD_SIZE!=0&&(stop+(BOARD_SIZE+1))<BOARD_SIZE*BOARD_SIZE)\n    {\n         stop +=(BOARD_SIZE+1)\n    }\n\n    for (var c=start;c<stop+1;c+=(BOARD_SIZE+1))\n    {\n        if (squares[c]===player)\n        {\n            count++;\n            winList.push(c)\n        }\n        else {\n            winList = []\n            count=0;\n        }\n         if (count==5)\n         {\n             return winList;\n         }\n    }\n    \n   count = 0\n   winList = []\n    start = (i_row*BOARD_SIZE+i_col)\n    while (start-(BOARD_SIZE-1)>=0&&(start-(BOARD_SIZE-1))%BOARD_SIZE!=0)\n    {\n        start = start - (BOARD_SIZE-1)\n    }\n\n    stop = parseInt(i_row*BOARD_SIZE+i_col)\n    while ((stop+(BOARD_SIZE-1))%BOARD_SIZE!=(BOARD_SIZE-1)&&(stop+(BOARD_SIZE-1))<BOARD_SIZE*BOARD_SIZE)\n    {\n         stop +=(BOARD_SIZE-1)\n    }\n    for (var c=start;c<stop+1;c+=(BOARD_SIZE-1))\n    {\n        if (squares[c]===player)\n            {\n                count++;\n                winList.push(c)\n            }\n        else {\n            winList = []\n            count=0;\n        }\n         if (count==5)\n         {\n             return winList;\n         }\n    }\n\n  \n   return null;\n\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}